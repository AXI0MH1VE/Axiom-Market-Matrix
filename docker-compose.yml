version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: axiom-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-axiom_trading}
      POSTGRES_USER: ${POSTGRES_USER:-axiom}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-axiom}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - axiom-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: axiom-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-changeme}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - axiom-network

  # Main Trading Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: axiom-app
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # Application Settings
      ENVIRONMENT: ${ENVIRONMENT:-production}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      
      # Database Configuration
      DATABASE_URL: postgresql://${POSTGRES_USER:-axiom}:${POSTGRES_PASSWORD:-changeme}@postgres:5432/${POSTGRES_DB:-axiom_trading}
      
      # Redis Configuration
      REDIS_URL: redis://:${REDIS_PASSWORD:-changeme}@redis:6379/0
      
      # API Keys (set these in .env file)
      ALPHA_VANTAGE_API_KEY: ${ALPHA_VANTAGE_API_KEY}
      BINANCE_API_KEY: ${BINANCE_API_KEY}
      BINANCE_API_SECRET: ${BINANCE_API_SECRET}
      POLYGON_API_KEY: ${POLYGON_API_KEY}
      
      # Trading Configuration
      TRADING_MODE: ${TRADING_MODE:-paper}
      MAX_POSITION_SIZE: ${MAX_POSITION_SIZE:-10000}
      RISK_PER_TRADE: ${RISK_PER_TRADE:-0.02}
      
      # Security
      SECRET_KEY: ${SECRET_KEY:-generate-a-secure-random-key}
      JWT_ALGORITHM: HS256
      ACCESS_TOKEN_EXPIRE_MINUTES: 30
    volumes:
      - ./src:/app/src
      - ./logs:/app/logs
      - ./data:/app/data
      - ./cache:/app/cache
    ports:
      - "8000:8000"
    networks:
      - axiom-network

  # Background Worker for Strategy Execution
  worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: axiom-worker
    restart: unless-stopped
    command: python -m src.workers.strategy_executor
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      ENVIRONMENT: ${ENVIRONMENT:-production}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      DATABASE_URL: postgresql://${POSTGRES_USER:-axiom}:${POSTGRES_PASSWORD:-changeme}@postgres:5432/${POSTGRES_DB:-axiom_trading}
      REDIS_URL: redis://:${REDIS_PASSWORD:-changeme}@redis:6379/0
      ALPHA_VANTAGE_API_KEY: ${ALPHA_VANTAGE_API_KEY}
      BINANCE_API_KEY: ${BINANCE_API_KEY}
      BINANCE_API_SECRET: ${BINANCE_API_SECRET}
      POLYGON_API_KEY: ${POLYGON_API_KEY}
      TRADING_MODE: ${TRADING_MODE:-paper}
    volumes:
      - ./src:/app/src
      - ./logs:/app/logs
      - ./data:/app/data
    networks:
      - axiom-network

  # Prometheus for Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: axiom-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - axiom-network

  # Grafana for Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: axiom-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_INSTALL_PLUGINS: grafana-clock-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - axiom-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  axiom-network:
    driver: bridge
